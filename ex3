using System;

namespace DistanceApp
{
    // Interface IOperations
    public interface IOperations
    {
        void Display();
    }

    // Distance class implementing IOperations
    public class Distance : IOperations
    {
        private int feet;
        private int inches;

        // Instance constructor
        public Distance(int feet, int inches)
        {
            this.feet = feet;
            this.inches = inches;
            Normalize();
        }

        // Default constructor
        public Distance() : this(0, 0) { }

        // Normalize the values of feet and inches
        private void Normalize()
        {
            if (inches >= 12)
            {
                feet += inches / 12;
                inches %= 12;
            }
            else if (inches < 0)
            {
                int borrowFeet = (Math.Abs(inches) / 12) + 1;
                feet -= borrowFeet;
                inches += borrowFeet * 12;
            }
        }

        // Implement the Display function to print distance in feet-inches format
        public void Display()
        {
            Console.WriteLine($"{feet} feet, {inches} inches");
        }

        // Overload + operator
        public static Distance operator +(Distance d1, Distance d2)
        {
            return new Distance(d1.feet + d2.feet, d1.inches + d2.inches);
        }

        // Overload - operator
        public static Distance operator -(Distance d1, Distance d2)
        {
            return new Distance(d1.feet - d2.feet, d1.inches - d2.inches);
        }

        // Overload == operator
        public static bool operator ==(Distance d1, Distance d2)
        {
            return d1.feet == d2.feet && d1.inches == d2.inches;
        }

        // Overload != operator (must overload when overloading ==)
        public static bool operator !=(Distance d1, Distance d2)
        {
            return !(d1 == d2);
        }

        // Overload <= operator
        public static bool operator <=(Distance d1, Distance d2)
        {
            if (d1.feet < d2.feet)
                return true;
            if (d1.feet == d2.feet && d1.inches <= d2.inches)
                return true;
            return false;
        }

        // Overload >= operator (must overload when overloading <=)
        public static bool operator >=(Distance d1, Distance d2)
        {
            return !(d1 <= d2);
        }

        // Casting int to Distance
        public static implicit operator Distance(int value)
        {
            return new Distance(value, 0);
        }

        // Casting Distance to int (return feet)
        public static explicit operator int(Distance d)
        {
            return d.feet;
        }
    }

    // DistanceTest class
    public class DistanceTest
    {
        public static void Main(string[] args)
        {
            Distance d1 = ReadDistanceInput("Enter first distance");
            Distance d2 = ReadDistanceInput("Enter second distance");

            int choice;
            do
            {
                Console.WriteLine("\nDistance Operations Menu:");
                Console.WriteLine("1. Add two distances");
                Console.WriteLine("2. Subtract two distances");
                Console.WriteLine("3. Compare two distances (==)");
                Console.WriteLine("4. Compare two distances (<=)");
                Console.WriteLine("5. Cast int to Distance");
                Console.WriteLine("6. Cast Distance to int");
                Console.WriteLine("7. Display distances");
                Console.WriteLine("0. Exit");
                Console.Write("Enter your choice: ");
                choice = int.Parse(Console.ReadLine());

                switch (choice)
                {
                    case 1:
                        Distance sum = d1 + d2;
                        Console.Write("Sum: ");
                        sum.Display();
                        break;

                    case 2:
                        Distance difference = d1 - d2;
                        Console.Write("Difference: ");
                        difference.Display();
                        break;

                    case 3:
                        Console.WriteLine($"Are the distances equal? {d1 == d2}");
                        break;

                    case 4:
                        Console.WriteLine($"Is Distance1 <= Distance2? {d1 <= d2}");
                        break;

                    case 5:
                        Console.Write("Enter an integer to cast to Distance: ");
                        int value = int.Parse(Console.ReadLine());
                        Distance d3 = value;
                        Console.Write("Distance after casting: ");
                        d3.Display();
                        break;

                    case 6:
                        int feetValue = (int)d1;
                        Console.WriteLine($"Distance1 as integer (feet): {feetValue}");
                        break;

                    case 7:
                        Console.Write("Distance1: ");
                        d1.Display();
                        Console.Write("Distance2: ");
                        d2.Display();
                        break;

                    case 0:
                        Console.WriteLine("Exiting...");
                        break;

                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            } while (choice != 0);
        }

        private static Distance ReadDistanceInput(string prompt)
        {
            Console.WriteLine(prompt);
            Console.Write("Enter feet: ");
            int feet = int.Parse(Console.ReadLine());
            Console.Write("Enter inches: ");
            int inches = int.Parse(Console.ReadLine());
            return new Distance(feet, inches);
        }
    }
}
