
using System;
using System.Collections.Generic;
using System.Linq;

namespace Exp2
{
    class Program
    {
        static void Main(string[] args)
        {
            Library library = new Library();
            User currentUser = null;

            while (true)
            {
                Console.WriteLine("\nLibrary Management System");
                Console.WriteLine("1. Register new user");
                Console.WriteLine("2. Login");
                Console.WriteLine("3. Exit");
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        RegisterUser(library);
                        break;
                    case "2":
                        currentUser = Login(library);
                        if (currentUser != null)
                        {
                            if (currentUser is Admin)
                                AdminMenu(currentUser as Admin, library);
                            else
                                UserMenu(currentUser, library);
                        }
                        break;
                    case "3":
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }

        static void RegisterUser(Library library)
        {
            Console.Write("Enter username: ");
            string username = Console.ReadLine();
            Console.Write("Enter password: ");
            string password = Console.ReadLine();
            Console.Write("Enter name: ");
            string name = Console.ReadLine();
            Console.Write("Enter phone number: ");
            string phoneNumber = Console.ReadLine();
            Console.Write("Is this an admin account? (y/n): ");
            bool isAdmin = Console.ReadLine().ToLower() == "y";

            User newUser = isAdmin
                ? new Admin { Username = username, Password = password, Name = name, PhoneNumber = phoneNumber }
                : new User { Username = username, Password = password, Name = name, PhoneNumber = phoneNumber };

            library.AddUser(newUser);
            Console.WriteLine("User registered successfully.");
        }

        static User Login(Library library)
        {
            Console.Write("Enter username: ");
            string username = Console.ReadLine();
            Console.Write("Enter password: ");
            string password = Console.ReadLine();

            User user = library.AuthenticateUser(username, password);
            if (user != null)
            {
                Console.WriteLine($"Welcome, {user.Name}!");
                return user;
            }
            else
            {
                Console.WriteLine("Invalid username or password.");
                return null;
            }
        }

        static void AdminMenu(Admin admin, Library library)
        {
            while (true)
            {
                Console.WriteLine("\nAdmin Menu:");
                Console.WriteLine("1. Add Book");
                Console.WriteLine("2. View Book Details");
                Console.WriteLine("3. Logout");
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        AddBook(library);
                        break;
                    case "2":
                        admin.ViewBookDetails(library);
                        break;
                    case "3":
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }

        static void UserMenu(User user, Library library)
        {
            while (true)
            {
                Console.WriteLine("\nUser Menu:");
                Console.WriteLine("1. Search Books");
                Console.WriteLine("2. Borrow Book");
                Console.WriteLine("3. Return Book");
                Console.WriteLine("4. View Borrowed Books");
                Console.WriteLine("5. Logout");
                Console.Write("Enter your choice: ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        SearchBooks(library);
                        break;
                    case "2":
                        BorrowBook(user, library);
                        break;
                    case "3":
                        ReturnBook(user, library);
                        break;
                    case "4":
                        ViewBorrowedBooks(user);
                        break;
                    case "5":
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
        }

        static void AddBook(Library library)
        {
            Console.Write("Enter Book ID: ");
            int bookId = Convert.ToInt32(Console.ReadLine());
            Console.Write("Enter Title: ");
            string title = Console.ReadLine();
            Console.Write("Enter Author: ");
            string author = Console.ReadLine();
            Console.Write("Enter Publish Year: ");
            int publishYear = Convert.ToInt32(Console.ReadLine());
            Console.Write("Enter Type (1 for TextBook, 2 for Journal, 3 for Magazine): ");
            BookType type = (BookType)(Convert.ToInt32(Console.ReadLine()) - 1);
            Console.Write("Enter Count: ");
            int count = Convert.ToInt32(Console.ReadLine());

            Book book = new Book { BookId = bookId, Title = title, Author = author, PublishYear = publishYear, Type = type, Count = count };
            library.AddBook(book);
            Console.WriteLine("Book added successfully.");
        }

        static void SearchBooks(Library library)
        {
            Console.Write("Enter search term: ");
            string searchTerm = Console.ReadLine();
            var results = library.SearchBooks(searchTerm);
            foreach (var book in results)
            {
                Console.WriteLine($"ID: {book.BookId}, Title: {book.Title}, Author: {book.Author}, Type: {book.Type}, Available: {book.Count}");
            }
        }

        static void BorrowBook(User user, Library library)
        {
            Console.Write("Enter Book ID to borrow: ");
            int bookId = Convert.ToInt32(Console.ReadLine());
            Book book = library.GetBookById(bookId);
            if (book != null)
            {
                user.BorrowBook(book);
            }
            else
            {
                Console.WriteLine("Book not found.");
            }
        }

        static void ReturnBook(User user, Library library)
        {
            Console.Write("Enter Book ID to return: ");
            int bookId = Convert.ToInt32(Console.ReadLine());
            Book book = library.GetBookById(bookId);
            if (book != null)
            {
                user.ReturnBook(book);
            }
            else
            {
                Console.WriteLine("Book not found.");
            }
        }

        static void ViewBorrowedBooks(User user)
        {
            if (user.BorrowedBooks.Count == 0)
            {
                Console.WriteLine("You haven't borrowed any books.");
            }
            else
            {
                Console.WriteLine("Your borrowed books:");
                foreach (var book in user.BorrowedBooks)
                {
                    Console.WriteLine($"ID: {book.BookId}, Title: {book.Title}, Author: {book.Author}");
                }
            }
        }
    }

    enum BookType { TextBook, Journal, Magazine }

    class Book
    {
        public int BookId { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public int PublishYear { get; set; }
        public BookType Type { get; set; }
        public int Count { get; set; }
    }

    class User
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public string Name { get; set; }
        public string PhoneNumber { get; set; }
        public List<Book> BorrowedBooks { get; set; } = new List<Book>();

        public virtual void BorrowBook(Book book)
        {
            if (BorrowedBooks.Count >= 2)
            {
                Console.WriteLine("You can't borrow more than two books.");
                return;
            }

            if (book.Type == BookType.Journal || book.Type == BookType.Magazine)
            {
                Console.WriteLine("Journals and magazines are for reference only.");
                return;
            }

            if (book.Count > 0)
            {
                BorrowedBooks.Add(book);
                book.Count--;
                Console.WriteLine($"Book '{book.Title}' borrowed successfully.");
            }
            else
            {
                Console.WriteLine("This book is not available.");
            }
        }

        public virtual void ReturnBook(Book book)
        {
            if (BorrowedBooks.Remove(book))
            {
                book.Count++;
                Console.WriteLine($"Book '{book.Title}' returned successfully.");
            }
            else
            {
                Console.WriteLine("You haven't borrowed this book.");
            }
        }
    }

    class Admin : User
    {
        public void ViewBookDetails(Library library)
        {
            foreach (var book in library.GetAllBooks())
            {
                Console.WriteLine($"ID: {book.BookId}, Title: {book.Title}, Author: {book.Author}, Type: {book.Type}, Available: {book.Count}");
            }
        }
    }

    class Library
    {
        private List<Book> books = new List<Book>();
        private List<User> users = new List<User>();

        public void AddBook(Book book)
        {
            books.Add(book);
        }

        public void AddUser(User user)
        {
            users.Add(user);
        }

        public List<Book> SearchBooks(string searchTerm)
        {
            return books.Where(b => b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                    b.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        public Book GetBookById(int id)
        {
            return books.FirstOrDefault(b => b.BookId == id);
        }

        public List<Book> GetAllBooks()
        {
            return books;
        }

        public User AuthenticateUser(string username, string password)
        {
            return users.FirstOrDefault(u => u.Username == username && u.Password == password);
        }
    }
}
